package config;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import service.MusicService;

@RestController
public class AppController {
	
	private ApplicationContext context;
	private MusicService musicService;
	
	

	public ApplicationContext getAppContext() {
		context = new ClassPathXmlApplicationContext("beans.xml");
		return context;
	}

	public void setAppContext(ApplicationContext appContext) {
		this.context = appContext;
	}

	public MusicService getMusicService() {
		musicService = (MusicService) context.getBean("simpleServiceProxy");
		return musicService;
	}

	public void setMusicService(MusicService musicService) {
		this.musicService = musicService;
	}

	@RequestMapping("/isLogIn")
	public boolean isLogIn(HttpServletRequest requestContext) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		String ip = requestContext.getRemoteAddr();
		return musicService.isLogIn(ip);
	}

	@RequestMapping("/getUserId")
	public int getUserId(HttpServletRequest requestContext) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		String ip = requestContext.getRemoteAddr();
		return musicService.getUserId(ip);
	}

	@RequestMapping("/selectSongByUserId")
	public List<Song> selectSongByUserId(HttpServletRequest requestContext) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		String ip = requestContext.getRemoteAddr();
		int userId = musicService.getUserId(ip);
		return musicService.selectSongByUserId(userId);
	}
	

	@RequestMapping("/logIn")
	public boolean logIn(@RequestParam(value = "userAccount") String userAccount,
			@RequestParam(value = "userPassword") String userPassword,
			HttpServletRequest requestContext) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		int userId=musicService.logIn(userAccount, userPassword);
		Sessions session = new Sessions();
		String ip = requestContext.getRemoteAddr();
		Calendar calendar = Calendar.getInstance();
		Date currentTime = calendar.getTime();
		if(userId!=0){
			session.setSessionAccount(ip);
			session.setSessionTime(currentTime);
			session.setSessionUserId(userId);
			musicService.addSession(session);
			return true;
		}
		else 
			return false;
	}

	@RequestMapping("/search")
	public List<Song> search(@RequestParam(value = "name") String name, HttpServletRequest requestContext) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		String ip = requestContext.getRemoteAddr();
		int userId = musicService.getUserId(ip);
		return musicService.search(name, userId);
	}

	@RequestMapping("/add")
	public boolean add(@RequestParam(value = "name") String name,
			@RequestParam(value = "author", defaultValue = "Unknow") String author,
			@RequestParam(value = "status") boolean status, HttpServletRequest requestContext) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		String ip = requestContext.getRemoteAddr();
		int userId = musicService.getUserId(ip);
		Users user = musicService.getUserByUserId(userId);
		Song song = new Song();
		Calendar calendar = Calendar.getInstance();
		Date currentTime = calendar.getTime();
		try {
			song.setName(name);
			song.setAuthor(author);
			song.setDate(currentTime);
			song.setStatus(status);
			song.setUser(user);
			user.getSong().add(song);
			musicService.add(song);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@RequestMapping(name = "/delete")
	public boolean delete(@RequestParam(value = "id") int id) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		Song song = musicService.findById(id);
		if (song != null) {
			musicService.delete(song);
			return true;
		} else {
			return false;
		}
	}

	@RequestMapping("/modify")
	public boolean update(@RequestParam(value = "id") int id, @RequestParam(value = "name") String name,
			@RequestParam(value = "author") String author, @RequestParam(value = "status") boolean status) {
		ApplicationContext appContext = new ClassPathXmlApplicationContext("beans.xml");
		MusicService musicService = (MusicService) appContext.getBean("simpleServiceProxy");
		Song song = musicService.findById(id);
		Calendar calendar = Calendar.getInstance();
		Date currentTime = calendar.getTime();
		if (song != null) {
			System.out.println(song);
			song.setName(name);
			song.setAuthor(author);
			song.setStatus(status);
			song.setDate(currentTime);
			musicService.update(song);
			return true;
		} else {
			return false;
		}
	}
}
